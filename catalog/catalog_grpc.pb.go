// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: catalog/catalog.proto

package catalogv1

import (
	context "context"
	common "github.com/market-4-test/contract-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Catalog_GetTagsPaginate_FullMethodName                = "/catalog.Catalog/GetTagsPaginate"
	Catalog_GetTagsShortPaginate_FullMethodName           = "/catalog.Catalog/GetTagsShortPaginate"
	Catalog_GetTagsOffset_FullMethodName                  = "/catalog.Catalog/GetTagsOffset"
	Catalog_GetTagsShortOffset_FullMethodName             = "/catalog.Catalog/GetTagsShortOffset"
	Catalog_GetTagById_FullMethodName                     = "/catalog.Catalog/GetTagById"
	Catalog_CreateTag_FullMethodName                      = "/catalog.Catalog/CreateTag"
	Catalog_UpdateTag_FullMethodName                      = "/catalog.Catalog/UpdateTag"
	Catalog_DeleteTags_FullMethodName                     = "/catalog.Catalog/DeleteTags"
	Catalog_CheckAvailableTagNames_FullMethodName         = "/catalog.Catalog/CheckAvailableTagNames"
	Catalog_GetBrandsPaginate_FullMethodName              = "/catalog.Catalog/GetBrandsPaginate"
	Catalog_GetBrandsShortPaginate_FullMethodName         = "/catalog.Catalog/GetBrandsShortPaginate"
	Catalog_GetBrandsOffset_FullMethodName                = "/catalog.Catalog/GetBrandsOffset"
	Catalog_GetBrandsShortOffset_FullMethodName           = "/catalog.Catalog/GetBrandsShortOffset"
	Catalog_GetBrandById_FullMethodName                   = "/catalog.Catalog/GetBrandById"
	Catalog_GetBrandShortById_FullMethodName              = "/catalog.Catalog/GetBrandShortById"
	Catalog_CreateBrand_FullMethodName                    = "/catalog.Catalog/CreateBrand"
	Catalog_UpdateBrand_FullMethodName                    = "/catalog.Catalog/UpdateBrand"
	Catalog_DeleteBrands_FullMethodName                   = "/catalog.Catalog/DeleteBrands"
	Catalog_GetCategoriesPaginate_FullMethodName          = "/catalog.Catalog/GetCategoriesPaginate"
	Catalog_GetCategoriesShortPaginate_FullMethodName     = "/catalog.Catalog/GetCategoriesShortPaginate"
	Catalog_GetCategoriesOffset_FullMethodName            = "/catalog.Catalog/GetCategoriesOffset"
	Catalog_GetCategoriesShortOffset_FullMethodName       = "/catalog.Catalog/GetCategoriesShortOffset"
	Catalog_GetCategoryById_FullMethodName                = "/catalog.Catalog/GetCategoryById"
	Catalog_GetCategoryShortById_FullMethodName           = "/catalog.Catalog/GetCategoryShortById"
	Catalog_CreateCategory_FullMethodName                 = "/catalog.Catalog/CreateCategory"
	Catalog_UpdateCategory_FullMethodName                 = "/catalog.Catalog/UpdateCategory"
	Catalog_DeleteCategories_FullMethodName               = "/catalog.Catalog/DeleteCategories"
	Catalog_SetImageToCategory_FullMethodName             = "/catalog.Catalog/SetImageToCategory"
	Catalog_UpdateOrderSortToCategories_FullMethodName    = "/catalog.Catalog/UpdateOrderSortToCategories"
	Catalog_CheckAvailableSlug_FullMethodName             = "/catalog.Catalog/CheckAvailableSlug"
	Catalog_GetProductsPaginate_FullMethodName            = "/catalog.Catalog/GetProductsPaginate"
	Catalog_GetProductsShortPaginate_FullMethodName       = "/catalog.Catalog/GetProductsShortPaginate"
	Catalog_GetProductsOffset_FullMethodName              = "/catalog.Catalog/GetProductsOffset"
	Catalog_GetProductsShortOffset_FullMethodName         = "/catalog.Catalog/GetProductsShortOffset"
	Catalog_GetProductsByUuids_FullMethodName             = "/catalog.Catalog/GetProductsByUuids"
	Catalog_GetProductByUuid_FullMethodName               = "/catalog.Catalog/GetProductByUuid"
	Catalog_CreateProduct_FullMethodName                  = "/catalog.Catalog/CreateProduct"
	Catalog_UpdateProduct_FullMethodName                  = "/catalog.Catalog/UpdateProduct"
	Catalog_UpdateProductStatus_FullMethodName            = "/catalog.Catalog/UpdateProductStatus"
	Catalog_UpdateProductsStocks_FullMethodName           = "/catalog.Catalog/UpdateProductsStocks"
	Catalog_CheckProductAvailableSlug_FullMethodName      = "/catalog.Catalog/CheckProductAvailableSlug"
	Catalog_ToggleAttachProductsToCategory_FullMethodName = "/catalog.Catalog/ToggleAttachProductsToCategory"
	Catalog_ToggleAttachProductsToBrands_FullMethodName   = "/catalog.Catalog/ToggleAttachProductsToBrands"
	Catalog_ToggleAttachProductsToTags_FullMethodName     = "/catalog.Catalog/ToggleAttachProductsToTags"
)

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	// Tags
	GetTagsPaginate(ctx context.Context, in *GetTagsPaginateParams, opts ...grpc.CallOption) (*GetTagsPaginateResponse, error)
	GetTagsShortPaginate(ctx context.Context, in *GetTagsShortPaginateParams, opts ...grpc.CallOption) (*GetTagsShortPaginateResponse, error)
	GetTagsOffset(ctx context.Context, in *GetTagsOffsetParams, opts ...grpc.CallOption) (*GetTagsOffsetResponse, error)
	GetTagsShortOffset(ctx context.Context, in *GetTagsShortOffsetParams, opts ...grpc.CallOption) (*GetTagsShortOffsetResponse, error)
	GetTagById(ctx context.Context, in *GetTagByIdParams, opts ...grpc.CallOption) (*Tag, error)
	CreateTag(ctx context.Context, in *CreateTagParams, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *UpdateTagParams, opts ...grpc.CallOption) (*Tag, error)
	DeleteTags(ctx context.Context, in *DeleteTagsParams, opts ...grpc.CallOption) (*DeleteTagsResponse, error)
	CheckAvailableTagNames(ctx context.Context, in *CheckAvailableTagNamesParams, opts ...grpc.CallOption) (*CheckAvailableTagNamesResponse, error)
	// Brands
	GetBrandsPaginate(ctx context.Context, in *GetBrandsPaginateParams, opts ...grpc.CallOption) (*GetBrandsPaginateResponse, error)
	GetBrandsShortPaginate(ctx context.Context, in *GetBrandsPaginateParams, opts ...grpc.CallOption) (*GetBrandsShortPaginateResponse, error)
	GetBrandsOffset(ctx context.Context, in *GetOffsetBrandsParams, opts ...grpc.CallOption) (*GetBrandsOffsetResponse, error)
	GetBrandsShortOffset(ctx context.Context, in *GetOffsetBrandsShortParams, opts ...grpc.CallOption) (*GetBrandsShortOffsetResponse, error)
	GetBrandById(ctx context.Context, in *GetBrandByIdParams, opts ...grpc.CallOption) (*Brand, error)
	GetBrandShortById(ctx context.Context, in *GetBrandByIdParams, opts ...grpc.CallOption) (*BrandShort, error)
	CreateBrand(ctx context.Context, in *CreateBrandParams, opts ...grpc.CallOption) (*Brand, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandParams, opts ...grpc.CallOption) (*Brand, error)
	DeleteBrands(ctx context.Context, in *DeleteBrandsParams, opts ...grpc.CallOption) (*DeleteBrandsResponse, error)
	// Categories
	GetCategoriesPaginate(ctx context.Context, in *GetCategoriesPaginateParams, opts ...grpc.CallOption) (*GetPaginateCategoriesResponse, error)
	GetCategoriesShortPaginate(ctx context.Context, in *GetCategoriesPaginateParams, opts ...grpc.CallOption) (*GetPaginateCategoriesShortResponse, error)
	GetCategoriesOffset(ctx context.Context, in *GetCategoriesOffsetParams, opts ...grpc.CallOption) (*GetCategoriesOffsetResponse, error)
	GetCategoriesShortOffset(ctx context.Context, in *GetCategoriesShortOffsetParams, opts ...grpc.CallOption) (*GetCategoriesShortOffsetResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdParams, opts ...grpc.CallOption) (*Category, error)
	GetCategoryShortById(ctx context.Context, in *GetCategoryByIdParams, opts ...grpc.CallOption) (*CategoryShort, error)
	CreateCategory(ctx context.Context, in *CreateCategoryParams, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryParams, opts ...grpc.CallOption) (*Category, error)
	DeleteCategories(ctx context.Context, in *DeleteCategoriesParams, opts ...grpc.CallOption) (*DeleteCategoriesResponse, error)
	SetImageToCategory(ctx context.Context, in *SetImageToCategoryParams, opts ...grpc.CallOption) (*common.Status, error)
	UpdateOrderSortToCategories(ctx context.Context, in *UpdateOrderSortToCategoriesParams, opts ...grpc.CallOption) (*UpdateOrderSortToCategoriesResponse, error)
	CheckAvailableSlug(ctx context.Context, in *CheckAvailableSlugParams, opts ...grpc.CallOption) (*common.Status, error)
	// Products
	GetProductsPaginate(ctx context.Context, in *GetProductsPaginateParams, opts ...grpc.CallOption) (*GetProductsPaginateResponse, error)
	GetProductsShortPaginate(ctx context.Context, in *GetProductsShortPaginateParams, opts ...grpc.CallOption) (*GetProductsShortPaginateResponse, error)
	GetProductsOffset(ctx context.Context, in *GetProductsOffsetParams, opts ...grpc.CallOption) (*GetProductsOffsetResponse, error)
	GetProductsShortOffset(ctx context.Context, in *GetProductsShortOffsetParams, opts ...grpc.CallOption) (*GetProductsShortOffsetResponse, error)
	GetProductsByUuids(ctx context.Context, in *GetProductsByUuidsParams, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductByUuid(ctx context.Context, in *GetProductByUuidParams, opts ...grpc.CallOption) (*Product, error)
	CreateProduct(ctx context.Context, in *CreateProductParams, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *UpdateProductMetaParams, opts ...grpc.CallOption) (*Product, error)
	UpdateProductStatus(ctx context.Context, in *UpdateProductStatusParams, opts ...grpc.CallOption) (*common.Status, error)
	UpdateProductsStocks(ctx context.Context, in *UpdateProductsStocksParams, opts ...grpc.CallOption) (*UpdateProductsStocksResponse, error)
	CheckProductAvailableSlug(ctx context.Context, in *CheckProductAvailableSlugParams, opts ...grpc.CallOption) (*common.Status, error)
	ToggleAttachProductsToCategory(ctx context.Context, in *ToggleAttachProductsToCategoryParams, opts ...grpc.CallOption) (*common.Status, error)
	ToggleAttachProductsToBrands(ctx context.Context, in *ToggleAttachProductsToBrandsParams, opts ...grpc.CallOption) (*common.Status, error)
	ToggleAttachProductsToTags(ctx context.Context, in *ToggleAttachProductsToTagsParams, opts ...grpc.CallOption) (*common.Status, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetTagsPaginate(ctx context.Context, in *GetTagsPaginateParams, opts ...grpc.CallOption) (*GetTagsPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetTagsPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetTagsShortPaginate(ctx context.Context, in *GetTagsShortPaginateParams, opts ...grpc.CallOption) (*GetTagsShortPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsShortPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetTagsShortPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetTagsOffset(ctx context.Context, in *GetTagsOffsetParams, opts ...grpc.CallOption) (*GetTagsOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetTagsOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetTagsShortOffset(ctx context.Context, in *GetTagsShortOffsetParams, opts ...grpc.CallOption) (*GetTagsShortOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsShortOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetTagsShortOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetTagById(ctx context.Context, in *GetTagByIdParams, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, Catalog_GetTagById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateTag(ctx context.Context, in *CreateTagParams, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, Catalog_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateTag(ctx context.Context, in *UpdateTagParams, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, Catalog_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteTags(ctx context.Context, in *DeleteTagsParams, opts ...grpc.CallOption) (*DeleteTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTagsResponse)
	err := c.cc.Invoke(ctx, Catalog_DeleteTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CheckAvailableTagNames(ctx context.Context, in *CheckAvailableTagNamesParams, opts ...grpc.CallOption) (*CheckAvailableTagNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailableTagNamesResponse)
	err := c.cc.Invoke(ctx, Catalog_CheckAvailableTagNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandsPaginate(ctx context.Context, in *GetBrandsPaginateParams, opts ...grpc.CallOption) (*GetBrandsPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandsPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBrandsPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandsShortPaginate(ctx context.Context, in *GetBrandsPaginateParams, opts ...grpc.CallOption) (*GetBrandsShortPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandsShortPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBrandsShortPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandsOffset(ctx context.Context, in *GetOffsetBrandsParams, opts ...grpc.CallOption) (*GetBrandsOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandsOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBrandsOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandsShortOffset(ctx context.Context, in *GetOffsetBrandsShortParams, opts ...grpc.CallOption) (*GetBrandsShortOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandsShortOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBrandsShortOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandById(ctx context.Context, in *GetBrandByIdParams, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, Catalog_GetBrandById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBrandShortById(ctx context.Context, in *GetBrandByIdParams, opts ...grpc.CallOption) (*BrandShort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandShort)
	err := c.cc.Invoke(ctx, Catalog_GetBrandShortById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateBrand(ctx context.Context, in *CreateBrandParams, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, Catalog_CreateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateBrand(ctx context.Context, in *UpdateBrandParams, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, Catalog_UpdateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteBrands(ctx context.Context, in *DeleteBrandsParams, opts ...grpc.CallOption) (*DeleteBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBrandsResponse)
	err := c.cc.Invoke(ctx, Catalog_DeleteBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoriesPaginate(ctx context.Context, in *GetCategoriesPaginateParams, opts ...grpc.CallOption) (*GetPaginateCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaginateCategoriesResponse)
	err := c.cc.Invoke(ctx, Catalog_GetCategoriesPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoriesShortPaginate(ctx context.Context, in *GetCategoriesPaginateParams, opts ...grpc.CallOption) (*GetPaginateCategoriesShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaginateCategoriesShortResponse)
	err := c.cc.Invoke(ctx, Catalog_GetCategoriesShortPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoriesOffset(ctx context.Context, in *GetCategoriesOffsetParams, opts ...grpc.CallOption) (*GetCategoriesOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetCategoriesOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoriesShortOffset(ctx context.Context, in *GetCategoriesShortOffsetParams, opts ...grpc.CallOption) (*GetCategoriesShortOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesShortOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetCategoriesShortOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdParams, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Catalog_GetCategoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetCategoryShortById(ctx context.Context, in *GetCategoryByIdParams, opts ...grpc.CallOption) (*CategoryShort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryShort)
	err := c.cc.Invoke(ctx, Catalog_GetCategoryShortById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateCategory(ctx context.Context, in *CreateCategoryParams, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Catalog_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateCategory(ctx context.Context, in *UpdateCategoryParams, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Catalog_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteCategories(ctx context.Context, in *DeleteCategoriesParams, opts ...grpc.CallOption) (*DeleteCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoriesResponse)
	err := c.cc.Invoke(ctx, Catalog_DeleteCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) SetImageToCategory(ctx context.Context, in *SetImageToCategoryParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_SetImageToCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateOrderSortToCategories(ctx context.Context, in *UpdateOrderSortToCategoriesParams, opts ...grpc.CallOption) (*UpdateOrderSortToCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderSortToCategoriesResponse)
	err := c.cc.Invoke(ctx, Catalog_UpdateOrderSortToCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CheckAvailableSlug(ctx context.Context, in *CheckAvailableSlugParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_CheckAvailableSlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductsPaginate(ctx context.Context, in *GetProductsPaginateParams, opts ...grpc.CallOption) (*GetProductsPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetProductsPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductsShortPaginate(ctx context.Context, in *GetProductsShortPaginateParams, opts ...grpc.CallOption) (*GetProductsShortPaginateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsShortPaginateResponse)
	err := c.cc.Invoke(ctx, Catalog_GetProductsShortPaginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductsOffset(ctx context.Context, in *GetProductsOffsetParams, opts ...grpc.CallOption) (*GetProductsOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetProductsOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductsShortOffset(ctx context.Context, in *GetProductsShortOffsetParams, opts ...grpc.CallOption) (*GetProductsShortOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsShortOffsetResponse)
	err := c.cc.Invoke(ctx, Catalog_GetProductsShortOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductsByUuids(ctx context.Context, in *GetProductsByUuidsParams, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, Catalog_GetProductsByUuids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetProductByUuid(ctx context.Context, in *GetProductByUuidParams, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Catalog_GetProductByUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateProduct(ctx context.Context, in *CreateProductParams, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Catalog_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateProduct(ctx context.Context, in *UpdateProductMetaParams, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Catalog_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateProductStatus(ctx context.Context, in *UpdateProductStatusParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_UpdateProductStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateProductsStocks(ctx context.Context, in *UpdateProductsStocksParams, opts ...grpc.CallOption) (*UpdateProductsStocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductsStocksResponse)
	err := c.cc.Invoke(ctx, Catalog_UpdateProductsStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CheckProductAvailableSlug(ctx context.Context, in *CheckProductAvailableSlugParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_CheckProductAvailableSlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ToggleAttachProductsToCategory(ctx context.Context, in *ToggleAttachProductsToCategoryParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_ToggleAttachProductsToCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ToggleAttachProductsToBrands(ctx context.Context, in *ToggleAttachProductsToBrandsParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_ToggleAttachProductsToBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ToggleAttachProductsToTags(ctx context.Context, in *ToggleAttachProductsToTagsParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Catalog_ToggleAttachProductsToTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility.
type CatalogServer interface {
	// Tags
	GetTagsPaginate(context.Context, *GetTagsPaginateParams) (*GetTagsPaginateResponse, error)
	GetTagsShortPaginate(context.Context, *GetTagsShortPaginateParams) (*GetTagsShortPaginateResponse, error)
	GetTagsOffset(context.Context, *GetTagsOffsetParams) (*GetTagsOffsetResponse, error)
	GetTagsShortOffset(context.Context, *GetTagsShortOffsetParams) (*GetTagsShortOffsetResponse, error)
	GetTagById(context.Context, *GetTagByIdParams) (*Tag, error)
	CreateTag(context.Context, *CreateTagParams) (*Tag, error)
	UpdateTag(context.Context, *UpdateTagParams) (*Tag, error)
	DeleteTags(context.Context, *DeleteTagsParams) (*DeleteTagsResponse, error)
	CheckAvailableTagNames(context.Context, *CheckAvailableTagNamesParams) (*CheckAvailableTagNamesResponse, error)
	// Brands
	GetBrandsPaginate(context.Context, *GetBrandsPaginateParams) (*GetBrandsPaginateResponse, error)
	GetBrandsShortPaginate(context.Context, *GetBrandsPaginateParams) (*GetBrandsShortPaginateResponse, error)
	GetBrandsOffset(context.Context, *GetOffsetBrandsParams) (*GetBrandsOffsetResponse, error)
	GetBrandsShortOffset(context.Context, *GetOffsetBrandsShortParams) (*GetBrandsShortOffsetResponse, error)
	GetBrandById(context.Context, *GetBrandByIdParams) (*Brand, error)
	GetBrandShortById(context.Context, *GetBrandByIdParams) (*BrandShort, error)
	CreateBrand(context.Context, *CreateBrandParams) (*Brand, error)
	UpdateBrand(context.Context, *UpdateBrandParams) (*Brand, error)
	DeleteBrands(context.Context, *DeleteBrandsParams) (*DeleteBrandsResponse, error)
	// Categories
	GetCategoriesPaginate(context.Context, *GetCategoriesPaginateParams) (*GetPaginateCategoriesResponse, error)
	GetCategoriesShortPaginate(context.Context, *GetCategoriesPaginateParams) (*GetPaginateCategoriesShortResponse, error)
	GetCategoriesOffset(context.Context, *GetCategoriesOffsetParams) (*GetCategoriesOffsetResponse, error)
	GetCategoriesShortOffset(context.Context, *GetCategoriesShortOffsetParams) (*GetCategoriesShortOffsetResponse, error)
	GetCategoryById(context.Context, *GetCategoryByIdParams) (*Category, error)
	GetCategoryShortById(context.Context, *GetCategoryByIdParams) (*CategoryShort, error)
	CreateCategory(context.Context, *CreateCategoryParams) (*Category, error)
	UpdateCategory(context.Context, *UpdateCategoryParams) (*Category, error)
	DeleteCategories(context.Context, *DeleteCategoriesParams) (*DeleteCategoriesResponse, error)
	SetImageToCategory(context.Context, *SetImageToCategoryParams) (*common.Status, error)
	UpdateOrderSortToCategories(context.Context, *UpdateOrderSortToCategoriesParams) (*UpdateOrderSortToCategoriesResponse, error)
	CheckAvailableSlug(context.Context, *CheckAvailableSlugParams) (*common.Status, error)
	// Products
	GetProductsPaginate(context.Context, *GetProductsPaginateParams) (*GetProductsPaginateResponse, error)
	GetProductsShortPaginate(context.Context, *GetProductsShortPaginateParams) (*GetProductsShortPaginateResponse, error)
	GetProductsOffset(context.Context, *GetProductsOffsetParams) (*GetProductsOffsetResponse, error)
	GetProductsShortOffset(context.Context, *GetProductsShortOffsetParams) (*GetProductsShortOffsetResponse, error)
	GetProductsByUuids(context.Context, *GetProductsByUuidsParams) (*GetProductsResponse, error)
	GetProductByUuid(context.Context, *GetProductByUuidParams) (*Product, error)
	CreateProduct(context.Context, *CreateProductParams) (*Product, error)
	UpdateProduct(context.Context, *UpdateProductMetaParams) (*Product, error)
	UpdateProductStatus(context.Context, *UpdateProductStatusParams) (*common.Status, error)
	UpdateProductsStocks(context.Context, *UpdateProductsStocksParams) (*UpdateProductsStocksResponse, error)
	CheckProductAvailableSlug(context.Context, *CheckProductAvailableSlugParams) (*common.Status, error)
	ToggleAttachProductsToCategory(context.Context, *ToggleAttachProductsToCategoryParams) (*common.Status, error)
	ToggleAttachProductsToBrands(context.Context, *ToggleAttachProductsToBrandsParams) (*common.Status, error)
	ToggleAttachProductsToTags(context.Context, *ToggleAttachProductsToTagsParams) (*common.Status, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogServer struct{}

func (UnimplementedCatalogServer) GetTagsPaginate(context.Context, *GetTagsPaginateParams) (*GetTagsPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsPaginate not implemented")
}
func (UnimplementedCatalogServer) GetTagsShortPaginate(context.Context, *GetTagsShortPaginateParams) (*GetTagsShortPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsShortPaginate not implemented")
}
func (UnimplementedCatalogServer) GetTagsOffset(context.Context, *GetTagsOffsetParams) (*GetTagsOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsOffset not implemented")
}
func (UnimplementedCatalogServer) GetTagsShortOffset(context.Context, *GetTagsShortOffsetParams) (*GetTagsShortOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsShortOffset not implemented")
}
func (UnimplementedCatalogServer) GetTagById(context.Context, *GetTagByIdParams) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedCatalogServer) CreateTag(context.Context, *CreateTagParams) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedCatalogServer) UpdateTag(context.Context, *UpdateTagParams) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedCatalogServer) DeleteTags(context.Context, *DeleteTagsParams) (*DeleteTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTags not implemented")
}
func (UnimplementedCatalogServer) CheckAvailableTagNames(context.Context, *CheckAvailableTagNamesParams) (*CheckAvailableTagNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailableTagNames not implemented")
}
func (UnimplementedCatalogServer) GetBrandsPaginate(context.Context, *GetBrandsPaginateParams) (*GetBrandsPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandsPaginate not implemented")
}
func (UnimplementedCatalogServer) GetBrandsShortPaginate(context.Context, *GetBrandsPaginateParams) (*GetBrandsShortPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandsShortPaginate not implemented")
}
func (UnimplementedCatalogServer) GetBrandsOffset(context.Context, *GetOffsetBrandsParams) (*GetBrandsOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandsOffset not implemented")
}
func (UnimplementedCatalogServer) GetBrandsShortOffset(context.Context, *GetOffsetBrandsShortParams) (*GetBrandsShortOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandsShortOffset not implemented")
}
func (UnimplementedCatalogServer) GetBrandById(context.Context, *GetBrandByIdParams) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandById not implemented")
}
func (UnimplementedCatalogServer) GetBrandShortById(context.Context, *GetBrandByIdParams) (*BrandShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandShortById not implemented")
}
func (UnimplementedCatalogServer) CreateBrand(context.Context, *CreateBrandParams) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedCatalogServer) UpdateBrand(context.Context, *UpdateBrandParams) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedCatalogServer) DeleteBrands(context.Context, *DeleteBrandsParams) (*DeleteBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrands not implemented")
}
func (UnimplementedCatalogServer) GetCategoriesPaginate(context.Context, *GetCategoriesPaginateParams) (*GetPaginateCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesPaginate not implemented")
}
func (UnimplementedCatalogServer) GetCategoriesShortPaginate(context.Context, *GetCategoriesPaginateParams) (*GetPaginateCategoriesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesShortPaginate not implemented")
}
func (UnimplementedCatalogServer) GetCategoriesOffset(context.Context, *GetCategoriesOffsetParams) (*GetCategoriesOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesOffset not implemented")
}
func (UnimplementedCatalogServer) GetCategoriesShortOffset(context.Context, *GetCategoriesShortOffsetParams) (*GetCategoriesShortOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesShortOffset not implemented")
}
func (UnimplementedCatalogServer) GetCategoryById(context.Context, *GetCategoryByIdParams) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedCatalogServer) GetCategoryShortById(context.Context, *GetCategoryByIdParams) (*CategoryShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryShortById not implemented")
}
func (UnimplementedCatalogServer) CreateCategory(context.Context, *CreateCategoryParams) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCatalogServer) UpdateCategory(context.Context, *UpdateCategoryParams) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCatalogServer) DeleteCategories(context.Context, *DeleteCategoriesParams) (*DeleteCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategories not implemented")
}
func (UnimplementedCatalogServer) SetImageToCategory(context.Context, *SetImageToCategoryParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetImageToCategory not implemented")
}
func (UnimplementedCatalogServer) UpdateOrderSortToCategories(context.Context, *UpdateOrderSortToCategoriesParams) (*UpdateOrderSortToCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSortToCategories not implemented")
}
func (UnimplementedCatalogServer) CheckAvailableSlug(context.Context, *CheckAvailableSlugParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailableSlug not implemented")
}
func (UnimplementedCatalogServer) GetProductsPaginate(context.Context, *GetProductsPaginateParams) (*GetProductsPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsPaginate not implemented")
}
func (UnimplementedCatalogServer) GetProductsShortPaginate(context.Context, *GetProductsShortPaginateParams) (*GetProductsShortPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsShortPaginate not implemented")
}
func (UnimplementedCatalogServer) GetProductsOffset(context.Context, *GetProductsOffsetParams) (*GetProductsOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsOffset not implemented")
}
func (UnimplementedCatalogServer) GetProductsShortOffset(context.Context, *GetProductsShortOffsetParams) (*GetProductsShortOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsShortOffset not implemented")
}
func (UnimplementedCatalogServer) GetProductsByUuids(context.Context, *GetProductsByUuidsParams) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByUuids not implemented")
}
func (UnimplementedCatalogServer) GetProductByUuid(context.Context, *GetProductByUuidParams) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByUuid not implemented")
}
func (UnimplementedCatalogServer) CreateProduct(context.Context, *CreateProductParams) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedCatalogServer) UpdateProduct(context.Context, *UpdateProductMetaParams) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedCatalogServer) UpdateProductStatus(context.Context, *UpdateProductStatusParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStatus not implemented")
}
func (UnimplementedCatalogServer) UpdateProductsStocks(context.Context, *UpdateProductsStocksParams) (*UpdateProductsStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductsStocks not implemented")
}
func (UnimplementedCatalogServer) CheckProductAvailableSlug(context.Context, *CheckProductAvailableSlugParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProductAvailableSlug not implemented")
}
func (UnimplementedCatalogServer) ToggleAttachProductsToCategory(context.Context, *ToggleAttachProductsToCategoryParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAttachProductsToCategory not implemented")
}
func (UnimplementedCatalogServer) ToggleAttachProductsToBrands(context.Context, *ToggleAttachProductsToBrandsParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAttachProductsToBrands not implemented")
}
func (UnimplementedCatalogServer) ToggleAttachProductsToTags(context.Context, *ToggleAttachProductsToTagsParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAttachProductsToTags not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}
func (UnimplementedCatalogServer) testEmbeddedByValue()                 {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	// If the following call pancis, it indicates UnimplementedCatalogServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetTagsPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetTagsPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetTagsPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetTagsPaginate(ctx, req.(*GetTagsPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetTagsShortPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsShortPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetTagsShortPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetTagsShortPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetTagsShortPaginate(ctx, req.(*GetTagsShortPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetTagsOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetTagsOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetTagsOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetTagsOffset(ctx, req.(*GetTagsOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetTagsShortOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsShortOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetTagsShortOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetTagsShortOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetTagsShortOffset(ctx, req.(*GetTagsShortOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetTagById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetTagById(ctx, req.(*GetTagByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateTag(ctx, req.(*CreateTagParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateTag(ctx, req.(*UpdateTagParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteTags(ctx, req.(*DeleteTagsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CheckAvailableTagNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailableTagNamesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CheckAvailableTagNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CheckAvailableTagNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CheckAvailableTagNames(ctx, req.(*CheckAvailableTagNamesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandsPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandsPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandsPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandsPaginate(ctx, req.(*GetBrandsPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandsShortPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandsShortPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandsShortPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandsShortPaginate(ctx, req.(*GetBrandsPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandsOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffsetBrandsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandsOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandsOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandsOffset(ctx, req.(*GetOffsetBrandsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandsShortOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffsetBrandsShortParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandsShortOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandsShortOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandsShortOffset(ctx, req.(*GetOffsetBrandsShortParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandById(ctx, req.(*GetBrandByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBrandShortById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBrandShortById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBrandShortById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBrandShortById(ctx, req.(*GetBrandByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateBrand(ctx, req.(*CreateBrandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateBrand(ctx, req.(*UpdateBrandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteBrands(ctx, req.(*DeleteBrandsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoriesPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoriesPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoriesPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoriesPaginate(ctx, req.(*GetCategoriesPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoriesShortPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoriesShortPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoriesShortPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoriesShortPaginate(ctx, req.(*GetCategoriesPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoriesOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoriesOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoriesOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoriesOffset(ctx, req.(*GetCategoriesOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoriesShortOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesShortOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoriesShortOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoriesShortOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoriesShortOffset(ctx, req.(*GetCategoriesShortOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoryById(ctx, req.(*GetCategoryByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetCategoryShortById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCategoryShortById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCategoryShortById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCategoryShortById(ctx, req.(*GetCategoryByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateCategory(ctx, req.(*CreateCategoryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateCategory(ctx, req.(*UpdateCategoryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoriesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteCategories(ctx, req.(*DeleteCategoriesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_SetImageToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImageToCategoryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).SetImageToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_SetImageToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).SetImageToCategory(ctx, req.(*SetImageToCategoryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateOrderSortToCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSortToCategoriesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateOrderSortToCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateOrderSortToCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateOrderSortToCategories(ctx, req.(*UpdateOrderSortToCategoriesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CheckAvailableSlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailableSlugParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CheckAvailableSlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CheckAvailableSlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CheckAvailableSlug(ctx, req.(*CheckAvailableSlugParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductsPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductsPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductsPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductsPaginate(ctx, req.(*GetProductsPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductsShortPaginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsShortPaginateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductsShortPaginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductsShortPaginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductsShortPaginate(ctx, req.(*GetProductsShortPaginateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductsOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductsOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductsOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductsOffset(ctx, req.(*GetProductsOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductsShortOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsShortOffsetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductsShortOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductsShortOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductsShortOffset(ctx, req.(*GetProductsShortOffsetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductsByUuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByUuidsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductsByUuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductsByUuids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductsByUuids(ctx, req.(*GetProductsByUuidsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetProductByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByUuidParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProductByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetProductByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProductByUuid(ctx, req.(*GetProductByUuidParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateProduct(ctx, req.(*CreateProductParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductMetaParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateProduct(ctx, req.(*UpdateProductMetaParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateProductStatus(ctx, req.(*UpdateProductStatusParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateProductsStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductsStocksParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateProductsStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateProductsStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateProductsStocks(ctx, req.(*UpdateProductsStocksParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CheckProductAvailableSlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductAvailableSlugParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CheckProductAvailableSlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CheckProductAvailableSlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CheckProductAvailableSlug(ctx, req.(*CheckProductAvailableSlugParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ToggleAttachProductsToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAttachProductsToCategoryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ToggleAttachProductsToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_ToggleAttachProductsToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ToggleAttachProductsToCategory(ctx, req.(*ToggleAttachProductsToCategoryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ToggleAttachProductsToBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAttachProductsToBrandsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ToggleAttachProductsToBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_ToggleAttachProductsToBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ToggleAttachProductsToBrands(ctx, req.(*ToggleAttachProductsToBrandsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ToggleAttachProductsToTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAttachProductsToTagsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ToggleAttachProductsToTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_ToggleAttachProductsToTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ToggleAttachProductsToTags(ctx, req.(*ToggleAttachProductsToTagsParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTagsPaginate",
			Handler:    _Catalog_GetTagsPaginate_Handler,
		},
		{
			MethodName: "GetTagsShortPaginate",
			Handler:    _Catalog_GetTagsShortPaginate_Handler,
		},
		{
			MethodName: "GetTagsOffset",
			Handler:    _Catalog_GetTagsOffset_Handler,
		},
		{
			MethodName: "GetTagsShortOffset",
			Handler:    _Catalog_GetTagsShortOffset_Handler,
		},
		{
			MethodName: "GetTagById",
			Handler:    _Catalog_GetTagById_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Catalog_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _Catalog_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTags",
			Handler:    _Catalog_DeleteTags_Handler,
		},
		{
			MethodName: "CheckAvailableTagNames",
			Handler:    _Catalog_CheckAvailableTagNames_Handler,
		},
		{
			MethodName: "GetBrandsPaginate",
			Handler:    _Catalog_GetBrandsPaginate_Handler,
		},
		{
			MethodName: "GetBrandsShortPaginate",
			Handler:    _Catalog_GetBrandsShortPaginate_Handler,
		},
		{
			MethodName: "GetBrandsOffset",
			Handler:    _Catalog_GetBrandsOffset_Handler,
		},
		{
			MethodName: "GetBrandsShortOffset",
			Handler:    _Catalog_GetBrandsShortOffset_Handler,
		},
		{
			MethodName: "GetBrandById",
			Handler:    _Catalog_GetBrandById_Handler,
		},
		{
			MethodName: "GetBrandShortById",
			Handler:    _Catalog_GetBrandShortById_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _Catalog_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Catalog_UpdateBrand_Handler,
		},
		{
			MethodName: "DeleteBrands",
			Handler:    _Catalog_DeleteBrands_Handler,
		},
		{
			MethodName: "GetCategoriesPaginate",
			Handler:    _Catalog_GetCategoriesPaginate_Handler,
		},
		{
			MethodName: "GetCategoriesShortPaginate",
			Handler:    _Catalog_GetCategoriesShortPaginate_Handler,
		},
		{
			MethodName: "GetCategoriesOffset",
			Handler:    _Catalog_GetCategoriesOffset_Handler,
		},
		{
			MethodName: "GetCategoriesShortOffset",
			Handler:    _Catalog_GetCategoriesShortOffset_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _Catalog_GetCategoryById_Handler,
		},
		{
			MethodName: "GetCategoryShortById",
			Handler:    _Catalog_GetCategoryShortById_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Catalog_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Catalog_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategories",
			Handler:    _Catalog_DeleteCategories_Handler,
		},
		{
			MethodName: "SetImageToCategory",
			Handler:    _Catalog_SetImageToCategory_Handler,
		},
		{
			MethodName: "UpdateOrderSortToCategories",
			Handler:    _Catalog_UpdateOrderSortToCategories_Handler,
		},
		{
			MethodName: "CheckAvailableSlug",
			Handler:    _Catalog_CheckAvailableSlug_Handler,
		},
		{
			MethodName: "GetProductsPaginate",
			Handler:    _Catalog_GetProductsPaginate_Handler,
		},
		{
			MethodName: "GetProductsShortPaginate",
			Handler:    _Catalog_GetProductsShortPaginate_Handler,
		},
		{
			MethodName: "GetProductsOffset",
			Handler:    _Catalog_GetProductsOffset_Handler,
		},
		{
			MethodName: "GetProductsShortOffset",
			Handler:    _Catalog_GetProductsShortOffset_Handler,
		},
		{
			MethodName: "GetProductsByUuids",
			Handler:    _Catalog_GetProductsByUuids_Handler,
		},
		{
			MethodName: "GetProductByUuid",
			Handler:    _Catalog_GetProductByUuid_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Catalog_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Catalog_UpdateProduct_Handler,
		},
		{
			MethodName: "UpdateProductStatus",
			Handler:    _Catalog_UpdateProductStatus_Handler,
		},
		{
			MethodName: "UpdateProductsStocks",
			Handler:    _Catalog_UpdateProductsStocks_Handler,
		},
		{
			MethodName: "CheckProductAvailableSlug",
			Handler:    _Catalog_CheckProductAvailableSlug_Handler,
		},
		{
			MethodName: "ToggleAttachProductsToCategory",
			Handler:    _Catalog_ToggleAttachProductsToCategory_Handler,
		},
		{
			MethodName: "ToggleAttachProductsToBrands",
			Handler:    _Catalog_ToggleAttachProductsToBrands_Handler,
		},
		{
			MethodName: "ToggleAttachProductsToTags",
			Handler:    _Catalog_ToggleAttachProductsToTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/catalog.proto",
}
