// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: logistic/logistic.proto

package logisticv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Logistic_GetWarehouses_FullMethodName      = "/logistic.Logistic/GetWarehouses"
	Logistic_GetWarehousesShort_FullMethodName = "/logistic.Logistic/GetWarehousesShort"
	Logistic_GetWarehouseById_FullMethodName   = "/logistic.Logistic/GetWarehouseById"
	Logistic_CreateWarehouse_FullMethodName    = "/logistic.Logistic/CreateWarehouse"
	Logistic_UpdateWarehouse_FullMethodName    = "/logistic.Logistic/UpdateWarehouse"
	Logistic_DeleteWarehouse_FullMethodName    = "/logistic.Logistic/DeleteWarehouse"
)

// LogisticClient is the client API for Logistic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticClient interface {
	GetWarehouses(ctx context.Context, in *GetWarehousesParams, opts ...grpc.CallOption) (*GetWarehousesResponse, error)
	GetWarehousesShort(ctx context.Context, in *GetWarehousesShortParams, opts ...grpc.CallOption) (*GetWarehousesShortResponse, error)
	GetWarehouseById(ctx context.Context, in *GetWarehouseByIdParams, opts ...grpc.CallOption) (*Warehouse, error)
	CreateWarehouse(ctx context.Context, in *CreateWarehouseParams, opts ...grpc.CallOption) (*Warehouse, error)
	UpdateWarehouse(ctx context.Context, in *UpdateWarehouseParams, opts ...grpc.CallOption) (*Warehouse, error)
	DeleteWarehouse(ctx context.Context, in *DeleteWarehousesParams, opts ...grpc.CallOption) (*DeleteWarehousesResponse, error)
}

type logisticClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticClient(cc grpc.ClientConnInterface) LogisticClient {
	return &logisticClient{cc}
}

func (c *logisticClient) GetWarehouses(ctx context.Context, in *GetWarehousesParams, opts ...grpc.CallOption) (*GetWarehousesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarehousesResponse)
	err := c.cc.Invoke(ctx, Logistic_GetWarehouses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticClient) GetWarehousesShort(ctx context.Context, in *GetWarehousesShortParams, opts ...grpc.CallOption) (*GetWarehousesShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarehousesShortResponse)
	err := c.cc.Invoke(ctx, Logistic_GetWarehousesShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticClient) GetWarehouseById(ctx context.Context, in *GetWarehouseByIdParams, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, Logistic_GetWarehouseById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseParams, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, Logistic_CreateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticClient) UpdateWarehouse(ctx context.Context, in *UpdateWarehouseParams, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, Logistic_UpdateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticClient) DeleteWarehouse(ctx context.Context, in *DeleteWarehousesParams, opts ...grpc.CallOption) (*DeleteWarehousesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWarehousesResponse)
	err := c.cc.Invoke(ctx, Logistic_DeleteWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticServer is the server API for Logistic service.
// All implementations must embed UnimplementedLogisticServer
// for forward compatibility.
type LogisticServer interface {
	GetWarehouses(context.Context, *GetWarehousesParams) (*GetWarehousesResponse, error)
	GetWarehousesShort(context.Context, *GetWarehousesShortParams) (*GetWarehousesShortResponse, error)
	GetWarehouseById(context.Context, *GetWarehouseByIdParams) (*Warehouse, error)
	CreateWarehouse(context.Context, *CreateWarehouseParams) (*Warehouse, error)
	UpdateWarehouse(context.Context, *UpdateWarehouseParams) (*Warehouse, error)
	DeleteWarehouse(context.Context, *DeleteWarehousesParams) (*DeleteWarehousesResponse, error)
	mustEmbedUnimplementedLogisticServer()
}

// UnimplementedLogisticServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogisticServer struct{}

func (UnimplementedLogisticServer) GetWarehouses(context.Context, *GetWarehousesParams) (*GetWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouses not implemented")
}
func (UnimplementedLogisticServer) GetWarehousesShort(context.Context, *GetWarehousesShortParams) (*GetWarehousesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehousesShort not implemented")
}
func (UnimplementedLogisticServer) GetWarehouseById(context.Context, *GetWarehouseByIdParams) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouseById not implemented")
}
func (UnimplementedLogisticServer) CreateWarehouse(context.Context, *CreateWarehouseParams) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedLogisticServer) UpdateWarehouse(context.Context, *UpdateWarehouseParams) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarehouse not implemented")
}
func (UnimplementedLogisticServer) DeleteWarehouse(context.Context, *DeleteWarehousesParams) (*DeleteWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWarehouse not implemented")
}
func (UnimplementedLogisticServer) mustEmbedUnimplementedLogisticServer() {}
func (UnimplementedLogisticServer) testEmbeddedByValue()                  {}

// UnsafeLogisticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticServer will
// result in compilation errors.
type UnsafeLogisticServer interface {
	mustEmbedUnimplementedLogisticServer()
}

func RegisterLogisticServer(s grpc.ServiceRegistrar, srv LogisticServer) {
	// If the following call pancis, it indicates UnimplementedLogisticServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Logistic_ServiceDesc, srv)
}

func _Logistic_GetWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehousesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).GetWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_GetWarehouses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).GetWarehouses(ctx, req.(*GetWarehousesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistic_GetWarehousesShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehousesShortParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).GetWarehousesShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_GetWarehousesShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).GetWarehousesShort(ctx, req.(*GetWarehousesShortParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistic_GetWarehouseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).GetWarehouseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_GetWarehouseById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).GetWarehouseById(ctx, req.(*GetWarehouseByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistic_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_CreateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).CreateWarehouse(ctx, req.(*CreateWarehouseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistic_UpdateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarehouseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).UpdateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_UpdateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).UpdateWarehouse(ctx, req.(*UpdateWarehouseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistic_DeleteWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWarehousesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServer).DeleteWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistic_DeleteWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServer).DeleteWarehouse(ctx, req.(*DeleteWarehousesParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Logistic_ServiceDesc is the grpc.ServiceDesc for Logistic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logistic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistic.Logistic",
	HandlerType: (*LogisticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWarehouses",
			Handler:    _Logistic_GetWarehouses_Handler,
		},
		{
			MethodName: "GetWarehousesShort",
			Handler:    _Logistic_GetWarehousesShort_Handler,
		},
		{
			MethodName: "GetWarehouseById",
			Handler:    _Logistic_GetWarehouseById_Handler,
		},
		{
			MethodName: "CreateWarehouse",
			Handler:    _Logistic_CreateWarehouse_Handler,
		},
		{
			MethodName: "UpdateWarehouse",
			Handler:    _Logistic_UpdateWarehouse_Handler,
		},
		{
			MethodName: "DeleteWarehouse",
			Handler:    _Logistic_DeleteWarehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistic/logistic.proto",
}
