// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: space/space.proto

package spacev1

import (
	context "context"
	common "github.com/market-4-test/contract-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Space_Authenticate_FullMethodName                   = "/space.Space/Authenticate"
	Space_Login_FullMethodName                          = "/space.Space/Login"
	Space_RefreshToken_FullMethodName                   = "/space.Space/RefreshToken"
	Space_ChangePassword_FullMethodName                 = "/space.Space/ChangePassword"
	Space_GetProfile_FullMethodName                     = "/space.Space/GetProfile"
	Space_GetRoles_FullMethodName                       = "/space.Space/GetRoles"
	Space_CreateRole_FullMethodName                     = "/space.Space/CreateRole"
	Space_UpdateRole_FullMethodName                     = "/space.Space/UpdateRole"
	Space_DeleteRole_FullMethodName                     = "/space.Space/DeleteRole"
	Space_AttachRoleToEmployee_FullMethodName           = "/space.Space/AttachRoleToEmployee"
	Space_DetachRoleFromEmployee_FullMethodName         = "/space.Space/DetachRoleFromEmployee"
	Space_GetPermissions_FullMethodName                 = "/space.Space/GetPermissions"
	Space_CreatePermission_FullMethodName               = "/space.Space/CreatePermission"
	Space_UpdatePermission_FullMethodName               = "/space.Space/UpdatePermission"
	Space_GetEmployees_FullMethodName                   = "/space.Space/GetEmployees"
	Space_CreateEmployee_FullMethodName                 = "/space.Space/CreateEmployee"
	Space_UpdateEmployee_FullMethodName                 = "/space.Space/UpdateEmployee"
	Space_CheckEmployeeAvailableUsername_FullMethodName = "/space.Space/CheckEmployeeAvailableUsername"
	Space_BlockEmployee_FullMethodName                  = "/space.Space/BlockEmployee"
)

// SpaceClient is the client API for Space service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceClient interface {
	// Auth
	Authenticate(ctx context.Context, in *AuthenticateParams, opts ...grpc.CallOption) (*common.Status, error)
	Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*AuthResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenParams, opts ...grpc.CallOption) (*AuthResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordParams, opts ...grpc.CallOption) (*common.Status, error)
	// Profile
	GetProfile(ctx context.Context, in *GetProfileParams, opts ...grpc.CallOption) (*Profile, error)
	// Roles
	GetRoles(ctx context.Context, in *GetRolesParams, opts ...grpc.CallOption) (*GetRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*common.ValidationErrors, error)
	UpdateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*common.ValidationErrors, error)
	DeleteRole(ctx context.Context, in *DeleteRoleParams, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	AttachRoleToEmployee(ctx context.Context, in *ToggleRoleToEmployeesParams, opts ...grpc.CallOption) (*common.Status, error)
	DetachRoleFromEmployee(ctx context.Context, in *ToggleRoleToEmployeesParams, opts ...grpc.CallOption) (*common.Status, error)
	// Permissions
	GetPermissions(ctx context.Context, in *GetPermissionsParams, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	CreatePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*common.Status, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionParams, opts ...grpc.CallOption) (*common.Status, error)
	// Employees
	GetEmployees(ctx context.Context, in *GetEmployeesParams, opts ...grpc.CallOption) (*GetEmployeesResponse, error)
	CreateEmployee(ctx context.Context, in *CreateEmployeeParams, opts ...grpc.CallOption) (*common.ValidationErrors, error)
	UpdateEmployee(ctx context.Context, in *UpdateEmployeeParams, opts ...grpc.CallOption) (*common.ValidationErrors, error)
	CheckEmployeeAvailableUsername(ctx context.Context, in *CheckEmployeeAvailableUsernameParams, opts ...grpc.CallOption) (*common.Status, error)
	BlockEmployee(ctx context.Context, in *BlockEmployeeParams, opts ...grpc.CallOption) (*common.Status, error)
}

type spaceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceClient(cc grpc.ClientConnInterface) SpaceClient {
	return &spaceClient{cc}
}

func (c *spaceClient) Authenticate(ctx context.Context, in *AuthenticateParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Space_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) RefreshToken(ctx context.Context, in *RefreshTokenParams, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Space_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ChangePassword(ctx context.Context, in *ChangePasswordParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetProfile(ctx context.Context, in *GetProfileParams, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Space_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetRoles(ctx context.Context, in *GetRolesParams, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, Space_GetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CreateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*common.ValidationErrors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ValidationErrors)
	err := c.cc.Invoke(ctx, Space_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) UpdateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*common.ValidationErrors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ValidationErrors)
	err := c.cc.Invoke(ctx, Space_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteRole(ctx context.Context, in *DeleteRoleParams, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, Space_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AttachRoleToEmployee(ctx context.Context, in *ToggleRoleToEmployeesParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_AttachRoleToEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DetachRoleFromEmployee(ctx context.Context, in *ToggleRoleToEmployeesParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_DetachRoleFromEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetPermissions(ctx context.Context, in *GetPermissionsParams, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, Space_GetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CreatePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetEmployees(ctx context.Context, in *GetEmployeesParams, opts ...grpc.CallOption) (*GetEmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmployeesResponse)
	err := c.cc.Invoke(ctx, Space_GetEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CreateEmployee(ctx context.Context, in *CreateEmployeeParams, opts ...grpc.CallOption) (*common.ValidationErrors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ValidationErrors)
	err := c.cc.Invoke(ctx, Space_CreateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) UpdateEmployee(ctx context.Context, in *UpdateEmployeeParams, opts ...grpc.CallOption) (*common.ValidationErrors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ValidationErrors)
	err := c.cc.Invoke(ctx, Space_UpdateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CheckEmployeeAvailableUsername(ctx context.Context, in *CheckEmployeeAvailableUsernameParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_CheckEmployeeAvailableUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) BlockEmployee(ctx context.Context, in *BlockEmployeeParams, opts ...grpc.CallOption) (*common.Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Status)
	err := c.cc.Invoke(ctx, Space_BlockEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServer is the server API for Space service.
// All implementations must embed UnimplementedSpaceServer
// for forward compatibility.
type SpaceServer interface {
	// Auth
	Authenticate(context.Context, *AuthenticateParams) (*common.Status, error)
	Login(context.Context, *LoginParams) (*AuthResponse, error)
	RefreshToken(context.Context, *RefreshTokenParams) (*AuthResponse, error)
	ChangePassword(context.Context, *ChangePasswordParams) (*common.Status, error)
	// Profile
	GetProfile(context.Context, *GetProfileParams) (*Profile, error)
	// Roles
	GetRoles(context.Context, *GetRolesParams) (*GetRolesResponse, error)
	CreateRole(context.Context, *CreateRoleParams) (*common.ValidationErrors, error)
	UpdateRole(context.Context, *CreateRoleParams) (*common.ValidationErrors, error)
	DeleteRole(context.Context, *DeleteRoleParams) (*DeleteRoleResponse, error)
	AttachRoleToEmployee(context.Context, *ToggleRoleToEmployeesParams) (*common.Status, error)
	DetachRoleFromEmployee(context.Context, *ToggleRoleToEmployeesParams) (*common.Status, error)
	// Permissions
	GetPermissions(context.Context, *GetPermissionsParams) (*GetPermissionsResponse, error)
	CreatePermission(context.Context, *CreatePermissionParams) (*common.Status, error)
	UpdatePermission(context.Context, *UpdatePermissionParams) (*common.Status, error)
	// Employees
	GetEmployees(context.Context, *GetEmployeesParams) (*GetEmployeesResponse, error)
	CreateEmployee(context.Context, *CreateEmployeeParams) (*common.ValidationErrors, error)
	UpdateEmployee(context.Context, *UpdateEmployeeParams) (*common.ValidationErrors, error)
	CheckEmployeeAvailableUsername(context.Context, *CheckEmployeeAvailableUsernameParams) (*common.Status, error)
	BlockEmployee(context.Context, *BlockEmployeeParams) (*common.Status, error)
	mustEmbedUnimplementedSpaceServer()
}

// UnimplementedSpaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpaceServer struct{}

func (UnimplementedSpaceServer) Authenticate(context.Context, *AuthenticateParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSpaceServer) Login(context.Context, *LoginParams) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSpaceServer) RefreshToken(context.Context, *RefreshTokenParams) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSpaceServer) ChangePassword(context.Context, *ChangePasswordParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedSpaceServer) GetProfile(context.Context, *GetProfileParams) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedSpaceServer) GetRoles(context.Context, *GetRolesParams) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedSpaceServer) CreateRole(context.Context, *CreateRoleParams) (*common.ValidationErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedSpaceServer) UpdateRole(context.Context, *CreateRoleParams) (*common.ValidationErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedSpaceServer) DeleteRole(context.Context, *DeleteRoleParams) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedSpaceServer) AttachRoleToEmployee(context.Context, *ToggleRoleToEmployeesParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachRoleToEmployee not implemented")
}
func (UnimplementedSpaceServer) DetachRoleFromEmployee(context.Context, *ToggleRoleToEmployeesParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachRoleFromEmployee not implemented")
}
func (UnimplementedSpaceServer) GetPermissions(context.Context, *GetPermissionsParams) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedSpaceServer) CreatePermission(context.Context, *CreatePermissionParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedSpaceServer) UpdatePermission(context.Context, *UpdatePermissionParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedSpaceServer) GetEmployees(context.Context, *GetEmployeesParams) (*GetEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedSpaceServer) CreateEmployee(context.Context, *CreateEmployeeParams) (*common.ValidationErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedSpaceServer) UpdateEmployee(context.Context, *UpdateEmployeeParams) (*common.ValidationErrors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedSpaceServer) CheckEmployeeAvailableUsername(context.Context, *CheckEmployeeAvailableUsernameParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmployeeAvailableUsername not implemented")
}
func (UnimplementedSpaceServer) BlockEmployee(context.Context, *BlockEmployeeParams) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockEmployee not implemented")
}
func (UnimplementedSpaceServer) mustEmbedUnimplementedSpaceServer() {}
func (UnimplementedSpaceServer) testEmbeddedByValue()               {}

// UnsafeSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceServer will
// result in compilation errors.
type UnsafeSpaceServer interface {
	mustEmbedUnimplementedSpaceServer()
}

func RegisterSpaceServer(s grpc.ServiceRegistrar, srv SpaceServer) {
	// If the following call pancis, it indicates UnimplementedSpaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Space_ServiceDesc, srv)
}

func _Space_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).Authenticate(ctx, req.(*AuthenticateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).Login(ctx, req.(*LoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).RefreshToken(ctx, req.(*RefreshTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ChangePassword(ctx, req.(*ChangePasswordParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetProfile(ctx, req.(*GetProfileParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetRoles(ctx, req.(*GetRolesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateRole(ctx, req.(*CreateRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).UpdateRole(ctx, req.(*CreateRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteRole(ctx, req.(*DeleteRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AttachRoleToEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRoleToEmployeesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AttachRoleToEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_AttachRoleToEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AttachRoleToEmployee(ctx, req.(*ToggleRoleToEmployeesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DetachRoleFromEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRoleToEmployeesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DetachRoleFromEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_DetachRoleFromEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DetachRoleFromEmployee(ctx, req.(*ToggleRoleToEmployeesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetPermissions(ctx, req.(*GetPermissionsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreatePermission(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).UpdatePermission(ctx, req.(*UpdatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_GetEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetEmployees(ctx, req.(*GetEmployeesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateEmployee(ctx, req.(*CreateEmployeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_UpdateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).UpdateEmployee(ctx, req.(*UpdateEmployeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CheckEmployeeAvailableUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmployeeAvailableUsernameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CheckEmployeeAvailableUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_CheckEmployeeAvailableUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CheckEmployeeAvailableUsername(ctx, req.(*CheckEmployeeAvailableUsernameParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_BlockEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockEmployeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).BlockEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Space_BlockEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).BlockEmployee(ctx, req.(*BlockEmployeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Space_ServiceDesc is the grpc.ServiceDesc for Space service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Space_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.Space",
	HandlerType: (*SpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Space_Authenticate_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Space_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Space_RefreshToken_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Space_ChangePassword_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Space_GetProfile_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Space_GetRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Space_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Space_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Space_DeleteRole_Handler,
		},
		{
			MethodName: "AttachRoleToEmployee",
			Handler:    _Space_AttachRoleToEmployee_Handler,
		},
		{
			MethodName: "DetachRoleFromEmployee",
			Handler:    _Space_DetachRoleFromEmployee_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Space_GetPermissions_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Space_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _Space_UpdatePermission_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _Space_GetEmployees_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _Space_CreateEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _Space_UpdateEmployee_Handler,
		},
		{
			MethodName: "CheckEmployeeAvailableUsername",
			Handler:    _Space_CheckEmployeeAvailableUsername_Handler,
		},
		{
			MethodName: "BlockEmployee",
			Handler:    _Space_BlockEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space/space.proto",
}
